{"ast":null,"code":"var _jsxFileName = \"/Users/mdkaifmolla/Desktop/netflix/src/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\"; // Make sure axios is correctly imported\nimport \"./Row.css\";\nimport Modal from \"./Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow = false\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const fetchTrailer = async movieId => {\n    try {\n      const response = await axios.get(`/movie/${movieId}/videos?api_key=114cae0d69989144e86c6f04a2d943bd`);\n      const trailers = response.data.results;\n      const youtubeTrailer = trailers.find(trailer => trailer.site === \"YouTube\" && trailer.type === \"Trailer\");\n      if (youtubeTrailer) {\n        setTrailerUrl(`https://www.youtube.com/embed/${youtubeTrailer.key}`);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch trailer\", error);\n    }\n  };\n  const handleOpenModal = movie => {\n    setSelectedMovie(movie);\n    fetchTrailer(movie.id);\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedMovie(null);\n  };\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleOpenModal(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `https://image.tmdb.org/t/p/original/${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), selectedMovie && /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: handleCloseModal,\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedMovie.title || selectedMovie.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedMovie.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), trailerUrl && /*#__PURE__*/_jsxDEV(\"iframe\", {\n          width: \"100%\",\n          height: \"315\",\n          src: trailerUrl,\n          frameBorder: \"0\",\n          allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n          allowFullScreen: true,\n          title: \"Trailer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"cEC9V9YjBAFjLk4Yuc/HCdiLDlE=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","Modal","jsxDEV","_jsxDEV","Row","title","fetchUrl","isLargeRow","_s","movies","setMovies","selectedMovie","setSelectedMovie","isModalOpen","setIsModalOpen","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","fetchTrailer","movieId","response","trailers","youtubeTrailer","find","trailer","site","type","key","error","console","handleOpenModal","movie","id","handleCloseModal","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","poster_path","backdrop_path","alt","name","isOpen","onRequestClose","content","overview","width","height","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["/Users/mdkaifmolla/Desktop/netflix/src/Row.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\"; // Make sure axios is correctly imported\nimport \"./Row.css\";\nimport Modal from \"./Modal\";\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const fetchTrailer = async (movieId) => {\n    try {\n      const response = await axios.get(\n        `/movie/${movieId}/videos?api_key=114cae0d69989144e86c6f04a2d943bd`\n      );\n      const trailers = response.data.results;\n      const youtubeTrailer = trailers.find(\n        (trailer) => trailer.site === \"YouTube\" && trailer.type === \"Trailer\"\n      );\n      if (youtubeTrailer) {\n        setTrailerUrl(`https://www.youtube.com/embed/${youtubeTrailer.key}`);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch trailer\", error);\n    }\n  };\n\n  const handleOpenModal = (movie) => {\n    setSelectedMovie(movie);\n    fetchTrailer(movie.id);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedMovie(null);\n  };\n\n  console.log(movies);\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleOpenModal(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            src={`https://image.tmdb.org/t/p/original/${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {selectedMovie && (\n        <Modal\n          isOpen={isModalOpen}\n          onRequestClose={handleCloseModal}\n          content={\n            <div className=\"modal-content\">\n              <h2>{selectedMovie.title || selectedMovie.name}</h2>\n              <p>{selectedMovie.overview}</p>\n              {trailerUrl && (\n                <iframe\n                  width=\"100%\"\n                  height=\"315\"\n                  src={trailerUrl}\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                  title=\"Trailer\"\n                ></iframe>\n              )}\n            </div>\n          }\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Row;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}